export type SortKey =
  | "popularity"
  | "priceAsc"
  | "priceDesc"
  | "durationAsc"
  | "durationDesc"

export function formatCurrency(
  amount: number,
  locale = "en-GB",
  currency = "EUR"
): string {
  return new Intl.NumberFormat(locale, { style: "currency", currency }).format(
    amount
  )
}

export function useUniqueByKey<T, K extends keyof T>(
  list: T[],
  key: K
): string[] {
  // Note: this is a simple helper; the hook naming mirrors original usage but has no React state
  return Array.from(new Set(list.map((item) => String(item[key])))).sort()
}

export function sortByKey<
  T extends { priceFrom: number; durationDays: number }
>(list: T[], key: SortKey): T[] {
  const arr = [...list]
  switch (key) {
    case "priceAsc":
      return arr.sort((a, b) => a.priceFrom - b.priceFrom)
    case "priceDesc":
      return arr.sort((a, b) => b.priceFrom - a.priceFrom)
    case "durationAsc":
      return arr.sort((a, b) => a.durationDays - b.durationDays)
    case "durationDesc":
      return arr.sort((a, b) => b.durationDays - a.durationDays)
    default:
      return arr
  }
}

// Funci√≥n para cargar datos de safaris desde archivos JSON
export async function getSafarisData(locale: string) {
  try {
    console.log("üîç Buscando safaris para locale:", locale)

    // Solo cargar safaris que sabemos que existen
    const safariIds = ["ndutu", "serengeti", "maretuniwonder", "pumba"]
    console.log("üìã IDs de safaris a buscar:", safariIds)

    const safaris = await Promise.all(
      safariIds.map(async (id) => {
        console.log(`üîç Intentando cargar safari: ${id}`)
        try {
          const data = await import(
            `../../data/safaris/${id}/${id}.${locale}.json`
          )
          console.log(`‚úÖ Safari ${id} cargado exitosamente`)
          return data.default
        } catch (error) {
          console.log(
            `‚ùå Error cargando ${id}.${locale}.json:`,
            (error as Error).message
          )
          // Fallback al espa√±ol si no existe el idioma
          try {
            const fallback = await import(
              `../../data/safaris/${id}/${id}.es.json`
            )
            console.log(`‚úÖ Safari ${id} cargado con fallback espa√±ol`)
            return fallback.default
          } catch (fallbackError) {
            console.warn(
              `‚ùå No se pudo cargar el safari ${id}:`,
              (fallbackError as Error).message
            )
            return null
          }
        }
      })
    )

    const validSafaris = safaris.filter(Boolean)
    console.log(`üéØ Safaris v√°lidos encontrados: ${validSafaris.length}`)
    console.log(
      "üìä Safaris:",
      validSafaris.map((s) => ({ id: s.id, title: s.title }))
    )

    return validSafaris
  } catch (error) {
    console.error("üí• Error general cargando safaris:", error)
    return []
  }
}

// Funci√≥n para obtener un safari espec√≠fico por ID
export async function getSafariData(safariId: string, locale: string) {
  try {
    console.log(
      `üîç getSafariData: Intentando cargar ${safariId}.${locale}.json`
    )
    const data = await import(
      `../../data/safaris/${safariId}/${safariId}.${locale}.json`
    )
    console.log(`‚úÖ getSafariData: Safari ${safariId} cargado exitosamente`)
    return data.default
  } catch (error) {
    console.log(
      `‚ùå getSafariData: Error cargando ${safariId}.${locale}.json:`,
      (error as Error).message
    )
    // Fallback al espa√±ol si no existe el idioma
    try {
      console.log(
        `üîÑ getSafariData: Intentando fallback espa√±ol para ${safariId}`
      )
      const fallback = await import(
        `../../data/safaris/${safariId}/${safariId}.es.json`
      )
      console.log(
        `‚úÖ getSafariData: Safari ${safariId} cargado con fallback espa√±ol`
      )
      return fallback.default
    } catch (fallbackError) {
      console.error(
        `‚ùå getSafariData: No se pudo cargar el safari ${safariId}:`,
        (fallbackError as Error).message
      )
      return null
    }
  }
}
